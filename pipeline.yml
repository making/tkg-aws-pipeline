resources:
- name: clusterawsadm
  type: github-release
  check_every: 9999h
  source:
    owner: kubernetes-sigs
    repository: cluster-api-provider-aws
    tag_filter: v0.5.4
- name: tkg-dir
  type: s3
  source:
    disable_ssl: false
    access_key_id: ((aws_access_key_id))
    secret_access_key: ((aws_secret_access_key))
    endpoint: ((s3_endpoint))
    bucket: ((s3_bucket))
    region_name: ((aws_region))
    versioned_file: tkg.tgz
- name: tkg-env
  type: s3
  source:
    disable_ssl: false
    access_key_id: ((aws_access_key_id))
    secret_access_key: ((aws_secret_access_key))
    endpoint: ((s3_endpoint))
    bucket: ((s3_bucket))
    region_name: ((aws_region))
    versioned_file: tkg-env.sh
- name: tkg-ssh-keypair
  type: s3
  source:
    disable_ssl: false
    access_key_id: ((aws_access_key_id))
    secret_access_key: ((aws_secret_access_key))
    endpoint: ((s3_endpoint))
    bucket: ((s3_bucket))
    region_name: ((aws_region))
    versioned_file: ((env_name)).pem

jobs:
- name: create-tkg-dir
  plan:
  - task: tkg-get-management-cluster
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: vmwarecmbu/k8s-ci-container
      outputs:
      - name: out
      run:
        path: bash
        args:
        - -ceux
        - |
          tkg version
          tkg get management-cluster
          tar cvzf out/tkg.tgz -C ~/ .tkg
  - put: tkg-dir
    params:
      file: out/tkg.tgz

- name: clusterawsadm-bootstrap
  plan:
  - in_parallel:
    - get: tkg-dir
      passed:
      - create-tkg-dir
      trigger: true
    - get: clusterawsadm
      params:
        globs:
        - clusterawsadm-linux-amd64
  - task: clusterawsadm-bootstrap
    params:
      AWS_ACCESS_KEY_ID: ((aws_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
      AWS_REGION: ((aws_region))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: vmwarecmbu/k8s-ci-container
      inputs:
      - name: clusterawsadm
      run:
        path: bash
        args:
        - -ceux
        - |
          install clusterawsadm/clusterawsadm-linux-amd64 /usr/local/bin/clusterawsadm
          clusterawsadm version
          clusterawsadm alpha bootstrap create-stack

- name: create-tkg-env
  plan:
  - in_parallel:
    - get: tkg-dir
      passed:
      - clusterawsadm-bootstrap
      trigger: true
    - get: clusterawsadm
      params:
        globs:
        - clusterawsadm-linux-amd64
  - task: create-tkg-env
    params:
      AWS_ACCESS_KEY_ID: ((aws_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
      AWS_REGION: ((aws_region))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: mikesir87/aws-cli
      inputs:
      - name: clusterawsadm
      outputs:
      - name: out
      run:
        path: bash
        args:
        - -c
        - |
          set -eo pipefail
          install clusterawsadm/clusterawsadm-linux-amd64 /usr/local/bin/clusterawsadm
          clusterawsadm version
          export AWS_CREDENTIALS=$(aws iam create-access-key --user-name bootstrapper.cluster-api-provider-aws.sigs.k8s.io --output json)
          if [ "${AWS_CREDENTIALS}" == "" ];then
            exit 1
          fi
          cat <<EOF > out/tkg-env.sh
          export AWS_ACCESS_KEY_ID=$(echo $AWS_CREDENTIALS | jq .AccessKey.AccessKeyId -r)
          export AWS_SECRET_ACCESS_KEY=$(echo $AWS_CREDENTIALS | jq .AccessKey.SecretAccessKey -r)
          export AWS_B64ENCODED_CREDENTIALS=$(clusterawsadm alpha bootstrap encode-aws-credentials)
          EOF
  - put: tkg-env
    params:
      file: out/tkg-env.sh

- name: create-key-pair
  plan:
  - in_parallel:
    - get: tkg-dir
      passed:
      - create-tkg-dir
      trigger: true
  - task: delete-key-pair
    params:
      AWS_DEFAULT_REGION: ((aws_region))
      AWS_ACCESS_KEY_ID: ((aws_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
      AWS_SSH_KEY_NAME: ((env_name))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: mesosphere/aws-cli
      run:
        path: sh
        args:
        - -cux
        - |
          aws ec2 delete-key-pair --key-name ${AWS_SSH_KEY_NAME}
  - task: create-key-pair
    params:
      AWS_DEFAULT_REGION: ((aws_region))
      AWS_ACCESS_KEY_ID: ((aws_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
      AWS_SSH_KEY_NAME: ((env_name))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: mikesir87/aws-cli
      outputs:
      - name: out
      run:
        path: bash
        args:
        - -ceux
        - |
          aws ec2 create-key-pair --key-name ${AWS_SSH_KEY_NAME} --output json | jq .KeyMaterial -r > out/${AWS_SSH_KEY_NAME}.pem
  - put: tkg-ssh-keypair
    params:
      file: out/((env_name)).pem

- name: tkg-init
  plan:
  - in_parallel:
    - get: tkg-dir
      passed:
      - create-tkg-env
      - create-key-pair
    - get: tkg-env
      passed:
      - create-tkg-env
      trigger: true
  - task: copy-tkg
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: vmwarecmbu/k8s-ci-container
      outputs:
      - name: tkg
      run:
        path: bash
        args:
        - -ceux
        - |
          cp /usr/local/bin/tkg tkg/
  - task: tkg-init
    privileged: true
    params:
      AWS_REGION: ((aws_region))
      AWS_SSH_KEY_NAME: ((env_name))
      ENV_NAME: ((env_name))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: karlkfi/concourse-dcind
      inputs:
      - name: tkg
      - name: tkg-dir
      - name: tkg-env
      outputs:
      - name: out
      run:
        path: entrypoint.sh
        args:
        - bash
        - -ceux
        - |
          apk add libc6-compat
          install tkg/tkg /usr/local/bin/
          curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
          install kubectl /usr/local/bin/
          tkg version
          kubectl version --client --short
          tar xzf tkg-dir/tkg.tgz -C ~/
          set +x
          source tkg-env/tkg-env.sh
          set -x
          cat <<EOF >> ~/.tkg/config.yaml
          AWS_REGION: ${AWS_REGION}
          AWS_NODE_AZ: ${AWS_REGION}a
          AWS_PRIVATE_NODE_CIDR: 10.0.0.0/24
          AWS_PUBLIC_NODE_CIDR: 10.0.1.0/24
          AWS_PUBLIC_SUBNET_ID:
          AWS_PRIVATE_SUBNET_ID:
          AWS_SSH_KEY_NAME: ${AWS_SSH_KEY_NAME}
          AWS_VPC_ID:
          AWS_VPC_CIDR: 10.0.0.0/16
          CLUSTER_CIDR: 100.96.0.0/11
          CONTROL_PLANE_MACHINE_TYPE: t3.small
          NODE_MACHINE_TYPE: t3.medium
          EOF
          tkg init --infrastructure aws --name ${ENV_NAME} --plan dev
          tar cvzf out/tkg.tgz -C ~/ .tkg .kube-tkg
  - put: tkg-dir
    params:
      file: out/tkg.tgz

- name: tkg-get-cluster
  plan:
  - in_parallel:
    - get: tkg-dir
      passed:
      - tkg-init
      trigger: true
    - get: tkg-env
      passed:
      - tkg-init
  - task: tkg-get-management-cluster
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: vmwarecmbu/k8s-ci-container
      inputs:
      - name: tkg-dir
      - name: tkg-env
      run:
        path: bash
        args:
        - -ceux
        - |
          tkg version
          tar xzf tkg-dir/tkg.tgz -C ~/
          set +x
          source tkg-env/tkg-env.sh
          set -x
          tkg get management-cluster
  - task: tkg-get-cluster
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: vmwarecmbu/k8s-ci-container
      inputs:
      - name: tkg-dir
      - name: tkg-env
      run:
        path: bash
        args:
        - -ceux
        - |
          tkg version
          tar xzf tkg-dir/tkg.tgz -C ~/
          set +x
          source tkg-env/tkg-env.sh
          set -x
          tkg get cluster --include-management-cluster

- name: tkg-delete-cluster
  plan:
  - in_parallel:
    - get: tkg-dir
      passed:
      - tkg-init
    - get: tkg-env
      passed:
      - tkg-init
  - task: copy-tkg
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: vmwarecmbu/k8s-ci-container
      outputs:
      - name: tkg
      run:
        path: bash
        args:
        - -ceux
        - |
          cp /usr/local/bin/tkg tkg/
  - task: tkg-delete-management-cluster
    privileged: true
    params:
      ENV_NAME: ((env_name))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: karlkfi/concourse-dcind
      inputs:
      - name: tkg
      - name: tkg-dir
      - name: tkg-env
      outputs:
      - name: out
      run:
        path: entrypoint.sh
        args:
        - bash
        - -ceux
        - |
          apk add libc6-compat
          install tkg/tkg /usr/local/bin/
          curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
          install kubectl /usr/local/bin/
          tkg version
          kubectl version --client --short
          tar xzf tkg-dir/tkg.tgz -C ~/
          set +x
          source tkg-env/tkg-env.sh
          set -x
          tkg delete management-cluster ${ENV_NAME} -y
          tar cvzf out/tkg.tgz -C ~/ .tkg .kube-tkg
  - put: tkg-dir
    params:
      file: out/tkg.tgz

- name: delete-cloudformation-stack
  plan:
  - task: delete-cloudformation-stack
    params:
      S3_BUCKET: ((s3_bucket))
      S3_ENDPOINT: ((s3_endpoint))
      AWS_DEFAULT_REGION: ((aws_region))
      AWS_ACCESS_KEY_ID: ((aws_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: mesosphere/aws-cli
      run:
        path: sh
        args:
        - -ceux
        - |
          aws cloudformation delete-stack --stack-name cluster-api-provider-aws-sigs-k8s-io

- name: create-bucket
  plan:
  - task: create-bucket
    params:
      S3_BUCKET: ((s3_bucket))
      S3_ENDPOINT: ((s3_endpoint))
      AWS_DEFAULT_REGION: ((aws_region))
      AWS_ACCESS_KEY_ID: ((aws_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: mesosphere/aws-cli
      run:
        path: sh
        args:
        - -cux
        - |
          LS=$(aws --endpoint-url ${S3_ENDPOINT} s3 ls | grep ${S3_BUCKET})
          if [ "${LS}" = "" ];then
            aws --endpoint-url ${S3_ENDPOINT} s3 mb s3://${S3_BUCKET}
            aws --endpoint-url ${S3_ENDPOINT} s3api put-bucket-versioning --bucket ${S3_BUCKET} --versioning-configuration Status=Enabled
          else
            echo "${S3_BUCKET} already exists."
          fi